module Rad.QL.Introspection where

__schema :: ObjectDefT m RootQuery
__schema = field "__schema" $ do
  describe "Schema introspection query"
  resolve $~> \(RootQuery td) ->
    Schema__ td

__type :: ObjectDefT m RootQuery
__type = field "__type" $ do
  describe "Retrieves a type introspection by name"
  name <- arg "name"
    >> describe
           "With some description"
       ... "yes hello blah blah blah"
       ... "blah blah blah blah ???"
       ... "go on for quite a while if you so choose"
    >> describe
           "blah blah blah blah ????????"
    >> describe
           "blah blah blah blah blah"
       ... " bla  h  blah blah Blah ??"
       ... "blah lzkjaljd f jL!!"
    :: Arg ByteString
  -- resolve
  resolve $ do
    RootQuery td <- ctx
    n            <- name
    freeType__ <$> Trie.lookup td n

-- | __Schema

newtype Schema__ = Schema__ TypeDict

instance (Monad m) => GraphQLType m Schema__ where

  def = defineObject "__Schema" $ do

    describe "Schema introspection type"

    implements SomeImplementation

    -- middlewares (get applied to all fields)
    requires role  Writer
    requires stage Beta
    value <- pullContext "value" :: Value something

    field "types" $~> \(Schema__ td) ->
        freeType__ <$> Trie.toList td
    
    field "queryType" $ do
      describe "Root query type"
      resolve $~> \(Schema__ td) ->
        freeType__ $ fromJust
                   $ Trie.lookup td "RootQueryType"

    field "mutationType" $ do
      describe "Root mutation type"
      resolve $~> \(Schema__ td) ->
        freeType__ <$> Trie.lookup td "RootMutationType"

    field "directives" $ do
      describe "All possible directives"
      resolve *-> directives

    field "invalides" $ do
      deprecate "This is no longer valid"
      describe "les invalides"
      resolve *~> (Nothing :: Maybe Directive)

    mutation "mutateSchema" $ do
      describe "performs a mutation on the schema in q"

-- | __Type

data Type__ = Type__ TypeRef TypeDef

instance (Monad m) => GraphQLType m Type__ where

  def = defineObject "__Type" $ do

    describe "Type introspection type"

    implements SomeConstructor
    implements SomeOtherConstructor

    field "kind" $~> \case
      Type__ (TypeList    _) _   -> LIST
      Type__ (TypeNonNull _) _   -> NON_NULL
      Type__ _ (TypeDefObject _) -> OBJECT
      Type__ _ (TypeDefScalar _) -> SCALAR

    field "name" $~> \case
      Type__ _ (TypeDefObject (ObjectTypeDef n _)) -> n
      _ -> ""

    field "description" $~> \case
      Type__ _ (TypeDefObject (ObjectTypeDef _ d)) -> d

    field "fields" $ do
      describe "List of fields offered by object and interface types"
      requires $ authorizedAs Editor
      requires $ inEnvironment Beta
      includeDeprecated <- arg "includeDeprecated"
        >> describe "Flag which indicates whether or not to include deprecated tags"
        >> validate nonNull
        >> defvalue False
      resolve $-> \(Type__ _ td) args ->
        case td of
             TypeDefObject    d -> Just ...
             TypeDefInterface d -> Just ...
             _                  -> Nothing

    field "interfaces" $ do
      describe "OBJECT only"
      describe "List of all interfaces provided"
      resolve $~> \case
        Type__ _ (TypeDefObject (ObjectTypeDef _ _ ifs)) ->
          Just $ map freeType__ ifs
        _ -> Nothing
